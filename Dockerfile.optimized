# 멀티스테이지 빌드로 이미지 크기 최적화
# 1단계: Dependencies 설치
FROM node:18-alpine AS deps
WORKDIR /app

# 필수 시스템 패키지만 설치
RUN apk add --no-cache libc6-compat

# package.json과 lock 파일만 복사 (캐시 최적화)
COPY package.json package-lock.json ./

# 프로덕션 의존성만 설치
RUN npm ci --only=production

# 2단계: 빌더
FROM node:18-alpine AS builder
WORKDIR /app

# 빌드에 필요한 모든 의존성 설치
COPY package.json package-lock.json ./
RUN npm ci

# 소스 코드 복사
COPY . .

# Prisma 생성
RUN npx prisma generate

# Next.js 빌드 (standalone 모드)
ENV NEXT_TELEMETRY_DISABLED 1
RUN npm run build

# node_modules 경량화
COPY scripts/safe-optimize-node-modules.sh ./scripts/
RUN chmod +x ./scripts/safe-optimize-node-modules.sh && \
    ./scripts/safe-optimize-node-modules.sh

# 3단계: 러너 (최종 이미지)
FROM node:18-alpine AS runner
WORKDIR /app

# 보안을 위한 non-root 사용자 생성
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nextjs -u 1001

# 프로덕션 모드 설정
ENV NODE_ENV production
ENV NEXT_TELEMETRY_DISABLED 1

# 필요한 파일만 복사
COPY --from=builder /app/public ./public
COPY --from=builder /app/.next/standalone ./
COPY --from=builder /app/.next/static ./.next/static

# Prisma 클라이언트
COPY --from=builder /app/node_modules/.prisma ./node_modules/.prisma
COPY --from=builder /app/node_modules/@prisma/client ./node_modules/@prisma/client

# 권한 설정
RUN chown -R nextjs:nodejs /app

# non-root 사용자로 전환
USER nextjs

# 포트 설정
EXPOSE 3000
ENV PORT 3000

# 헬스체크
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD node -e "require('http').get('http://localhost:3000/api/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1); })"

# 실행
CMD ["node", "server.js"]