version: '3.8'

services:
  # PostgreSQL 데이터베이스
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: exhell
      POSTGRES_USER: ${POSTGRES_USER:-exhell}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-changeme}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - prod-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U exhell"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis 캐시
  redis:
    image: redis:7-alpine
    command: redis-server --requirepass ${REDIS_PASSWORD:-changeme}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - prod-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Next.js 애플리케이션
  app:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - NODE_ENV=production
        - APP_ENV=production
    ports:
      - "3000:3000"
    environment:
      - APP_ENV=production
      - NODE_ENV=production
      - DATABASE_URL=postgresql://${POSTGRES_USER:-exhell}:${POSTGRES_PASSWORD:-changeme}@postgres:5432/exhell
      - REDIS_URL=redis://:${REDIS_PASSWORD:-changeme}@redis:6379
      - NEXTAUTH_URL=${NEXTAUTH_URL:-https://your-domain.com}
      - AUTH_SECRET=${AUTH_SECRET}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - GOOGLE_AI_API_KEY=${GOOGLE_AI_API_KEY}
      - CACHE_PROVIDER=redis
      - STORAGE_PROVIDER=${STORAGE_PROVIDER:-s3}
      - AWS_REGION=${AWS_REGION:-ap-northeast-2}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - S3_BUCKET_NAME=${S3_BUCKET_NAME}
      - EMAIL_PROVIDER=${EMAIL_PROVIDER:-sendgrid}
      - SENDGRID_API_KEY=${SENDGRID_API_KEY}
      - PAYMENT_PROVIDER=${PAYMENT_PROVIDER:-toss}
      - TOSS_CLIENT_KEY=${TOSS_CLIENT_KEY}
      - TOSS_SECRET_KEY=${TOSS_SECRET_KEY}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - prod-network
    command: sh -c "npx prisma migrate deploy && npm run start:prod"

  # WebSocket 서버
  socket:
    build:
      context: .
      dockerfile: Dockerfile.socket
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - APP_ENV=production
      - REDIS_URL=redis://:${REDIS_PASSWORD:-changeme}@redis:6379
    depends_on:
      - redis
    networks:
      - prod-network

  # Nginx 리버스 프록시 (선택적)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - app
      - socket
    networks:
      - prod-network

volumes:
  postgres_data:
  redis_data:

networks:
  prod-network:
    driver: bridge