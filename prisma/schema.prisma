// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id              String    @id @default(cuid())
  email           String    @unique
  password        String?   // OAuth 사용자는 비밀번호가 없을 수 있음
  name            String
  emailVerified   DateTime?
  emailVerificationToken String?
  emailVerificationExpires DateTime?
  role            Role      @default(USER)
  tier            String?   @default("FREE")
  tierUpdatedAt   DateTime?
  credits         Int       @default(100)
  referralCode    String    @unique
  referredBy      String?
  aiPreference    AITier    @default(ECONOMY)
  preferences     String?
  customerKey     String?   @unique
  tenantId        String    @default("default")
  metadata        String?
  lastActiveAt    DateTime?
  provider        String?   // OAuth provider (google, kakao)
  providerId      String?   // OAuth provider의 사용자 ID
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  @@index([tenantId])
  
  profile         Profile?
  subscription    Subscription?
  referral        Referral?
  files           File[]
  analyses        Analysis[]
  corrections     Correction[]
  conversations   ChatConversation[]
  reviews         Review[]
  transactions    Transaction[]
  referralLogs    ReferralLog[]  @relation("UserReferrals")
  paymentIntents  PaymentIntent[]
  usageLogs       UsageLog[]
  userFeedbacks   UserFeedback[]
  aiUsageStats    AIUsageStats?
  errorPatterns   ErrorPattern[]
  errorFailures   ErrorResolutionFailure[]
  fineTuningData  FineTuningData[]
  tierHistory     TierHistory[]
  creditTransactions CreditTransaction[]
  auditLogs       AuditLog[] @relation("AuditLogUser")
  adminLogs       AdminLog[] @relation("AdminLogUser")
  payments        Payment[]
  feedbacks       Feedback[]
  feedbackResponses Feedback[] @relation("FeedbackResponder")
  fileVersions    FileVersion[] @relation("FileVersionCreator")
  experimentAssignments ExperimentAssignment[]
  userModelHistory UserModelHistory?
  routingDecisions RoutingDecision[]
  aiUsageLogs     AIUsageLog[]
  knowledgeUsageLogs KnowledgeUsageLog[] @relation("KnowledgeUsageLogs")
  knowledgeFeedbacks KnowledgeFeedback[] @relation("KnowledgeFeedbacks")
  userStats       UserStats?
  analysisHistories AnalysisHistory[]
}

model Profile {
  id              String    @id @default(cuid())
  userId          String    @unique
  phone           String?
  company         String?
  position        String?
  language        String    @default("ko")
  timezone        String    @default("Asia/Seoul")
  emailNotifications Boolean @default(true)
  twoFactorEnabled   Boolean @default(false)
  lastPasswordChange DateTime @default(now())
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model File {
  id              String    @id @default(cuid())
  userId          String
  fileName        String
  originalName    String
  fileSize        Int
  mimeType        String
  uploadUrl       String
  status          FileStatus @default(PENDING)
  currentVersion  Int       @default(1)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  analyses        Analysis[]
  corrections     Correction[]
  errorPatterns   ErrorPattern[]
  errorFailures   ErrorResolutionFailure[]
  versions        FileVersion[]
}

model Analysis {
  id              String    @id @default(cuid())
  fileId          String
  userId          String
  errors          String
  corrections     String
  report          String
  
  // AI 분석 정보
  aiTier          AITier    @default(TIER1)
  confidence      Float?
  creditsUsed     Int
  promptTokens    Int
  completionTokens Int
  estimatedCost   Float
  processingPath  String      // 분석 경로 기록
  
  createdAt       DateTime  @default(now())
  
  file            File      @relation(fields: [fileId], references: [id], onDelete: Cascade)
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  correctionRecords Correction[]
}

model ChatConversation {
  id              String    @id @default(cuid())
  userId          String
  title           String
  tenantId        String?   // Optional tenant ID for multi-tenant support
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages        ChatMessage[]
}

model ChatMessage {
  id              String    @id @default(cuid())
  conversationId  String
  role            String    // "user" | "assistant" | "system"
  content         String
  creditsUsed     Int?
  aiTier          String?   // "TIER1" | "TIER2"
  modelUsed       String?   // Model name (e.g., "gpt-4", "claude-3")
  attachments     String?
  
  // 파인튜닝 데이터 수집용 필드
  userRating      Int?      // 1-5 별점
  wasHelpful      Boolean?  // 도움이 되었는지
  functionCalls   String?     // AI가 사용한 함수들
  feedbackText    String?   // 사용자의 텍스트 피드백
  correctedResponse String? // 사용자가 수정한 응답
  
  createdAt       DateTime  @default(now())
  
  conversation    ChatConversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
}

model Review {
  id              String    @id @default(cuid())
  userId          String
  rating          Int       // 1-5
  title           String
  content         String
  usageContext    String
  timeSaved       Int?      // minutes
  errorsFixed     Int?
  status          ReviewStatus @default(PENDING)
  createdAt       DateTime  @default(now())
  
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Transaction {
  id              String    @id @default(cuid())
  userId          String
  type            TransactionType
  amount          Float
  credits         Int?
  description     String
  status          TransactionStatus @default(PENDING)
  paymentKey      String?
  metadata        String?
  createdAt       DateTime  @default(now())
  
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Subscription {
  id              String    @id @default(cuid())
  userId          String    @unique
  plan            SubscriptionPlan @default(FREE)
  status          SubscriptionStatus @default(ACTIVE)
  creditsRemaining Int       @default(100)
  monthlyCredits  Int       @default(100)
  currentPeriodStart DateTime?
  currentPeriodEnd   DateTime?
  validUntil      DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Referral {
  id              String    @id @default(cuid())
  userId          String    @unique
  referralCode    String    @unique
  referralLink    String    @unique  // 고유 추천 링크
  referralCount   Int       @default(0)
  totalEarned     Float     @default(0)
  totalCreditsEarned Int     @default(0)
  
  // 추천 보상 설정
  rewardType      String    @default("PAYMENT_BASED") // PAYMENT_BASED, SIGNUP_BASED
  creditRewardAmount Int     @default(100) // 추천 보상 크레딧 수
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  referralRewards ReferralReward[]
}

model ReferralLog {
  id              String    @id @default(cuid())
  referrerId      String
  refereeEmail    String
  status          ReferralStatus @default(PENDING)
  rewardAmount    Int       @default(0)
  createdAt       DateTime  @default(now())
  completedAt     DateTime?
  
  referrer        User      @relation("UserReferrals", fields: [referrerId], references: [id], onDelete: Cascade)
}

model AIUsageStats {
  id              String    @id @default(cuid())
  userId          String    @unique
  
  tier1Calls      Int       @default(0)
  tier1Credits    Int       @default(0)
  tier1Cost       Float     @default(0)
  
  tier2Calls      Int       @default(0)
  tier2Credits    Int       @default(0)
  tier2Cost       Float     @default(0)
  
  creditsSaved    Int       @default(0)
  costSaved       Float     @default(0)
  
  lastUpdated     DateTime  @updatedAt
  
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Correction {
  id              String    @id @default(cuid())
  fileId          String
  userId          String
  analysisId      String
  
  corrections     String      // Details of all corrections
  correctedFileUrl String?  // URL of corrected file
  
  status          CorrectionStatus @default(PENDING)
  creditsUsed     Int       @default(0)
  creditsCharged  Int       @default(0) // Actual credits charged (may be less due to partial success)
  
  aiModel         String?
  confidence      Float?
  metadata        String?     // Additional metadata
  
  createdAt       DateTime  @default(now())
  
  file            File      @relation(fields: [fileId], references: [id], onDelete: Cascade)
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  analysis        Analysis  @relation(fields: [analysisId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([fileId])
  @@index([status])
}

model AIPromptCache {
  id              String    @id @default(cuid())
  promptHash      String    @unique
  model           String
  response        String
  confidence      Float
  creditsUsed     Int
  createdAt       DateTime  @default(now())
  expiresAt       DateTime
  hitCount        Int       @default(0)
}

model PaymentIntent {
  id              String    @id @default(cuid())
  userId          String
  orderId         String    @unique
  amount          Int
  currency        String    @default("KRW")
  status          PaymentStatus @default(PENDING)
  subscriptionPlan String?
  billingPeriod   String?
  paymentKey      String?
  metadata        String?
  createdAt       DateTime  @default(now())
  completedAt     DateTime?
  failedAt        DateTime?
  updatedAt       DateTime  @updatedAt
  
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UsageLog {
  id              String    @id @default(cuid())
  userId          String
  feature         String
  metadata        String?
  createdAt       DateTime  @default(now())
  
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserFeedback {
  id              String    @id @default(cuid())
  analysisId      String
  userId          String
  modelUsed       String
  helpful         Boolean
  accuracyScore   Int       // 1-5
  responseTime    Int       // milliseconds
  cost            Float
  feedbackText    String?
  errorReported   Boolean   @default(false)
  timestamp       DateTime  @default(now())
  
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([modelUsed])
  @@index([userId])
  @@index([timestamp])
}

model ModelPerformance {
  model           String    @id
  totalFeedbacks  Int       @default(0)
  avgAccuracyScore Float    @default(0)
  avgResponseTime Float     @default(0)
  avgCost         Float     @default(0)
  successRate     Float     @default(0)
  updatedAt       DateTime  @updatedAt
  
  @@index([avgAccuracyScore])
}

model Experiment {
  id              String    @id @default(cuid())
  name            String
  description     String
  status          String    // draft, active, paused, completed
  type            String    // model, prompt, parameter, feature
  variants        String    // JSON string of variants
  targetAudience  String?   // JSON string of targeting rules
  metrics         String[]
  startDate       DateTime
  endDate         DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  assignments     ExperimentAssignment[]
  results         ExperimentResult[]
  
  @@index([status])
  @@index([type])
}

model ExperimentAssignment {
  id              String    @id @default(cuid())
  experimentId    String
  variantId       String
  userId          String
  assignedAt      DateTime  @default(now())
  
  experiment      Experiment @relation(fields: [experimentId], references: [id], onDelete: Cascade)
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([experimentId, userId])
  @@index([userId])
}

model ExperimentResult {
  id              String    @id @default(cuid())
  experimentId    String
  variantId       String
  userId          String
  sessionId       String
  metrics         String    // JSON string of metrics
  timestamp       DateTime  @default(now())
  
  experiment      Experiment @relation(fields: [experimentId], references: [id], onDelete: Cascade)
  
  @@index([experimentId, variantId])
  @@index([timestamp])
}

model PromptTemplate {
  id              String    @id @default(cuid())
  name            String
  category        String
  language        String    @default("ko")
  template        String    @db.Text
  variables       String[]
  examples        String?   // JSON string
  performance     String?   // JSON string
  isActive        Boolean   @default(true)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  @@index([category])
  @@index([isActive])
}

model UserModelHistory {
  userId          String    @id
  preferences     String    // JSON string of model preferences
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model RoutingDecision {
  id              String    @id @default(cuid())
  userId          String
  selectedModel   String
  reason          String
  confidenceScore Float
  metadata        String?   // JSON string
  timestamp       DateTime  @default(now())
  
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([selectedModel])
  @@index([timestamp])
}

model AIUsageLog {
  id              String    @id @default(cuid())
  userId          String
  model           String
  taskType        String
  success         Boolean
  responseTime    Int?      // milliseconds
  error           String?
  cost            Float?
  timestamp       DateTime  @default(now())
  
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([model])
  @@index([timestamp])
  @@index([userId])
}

enum Role {
  USER
  SUPPORT
  ADMIN
  SUPER_ADMIN
}

enum AITier {
  ECONOMY   // Tier 1 우선
  BALANCED  // 자동 전환
  PREMIUM   // Tier 2 우선
  TIER1     // 실제 사용된 티어
  TIER2
}

enum SubscriptionPlan {
  FREE
  BASIC
  PREMIUM
  ENTERPRISE
}

enum FileStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

enum ReviewStatus {
  PENDING
  APPROVED
  REJECTED
}

enum TransactionType {
  PURCHASE
  SUBSCRIPTION
  REFUND
  BONUS
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum ReferralStatus {
  PENDING
  COMPLETED
  EXPIRED
}

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  EXPIRED
  PAST_DUE
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELED
  REFUNDED
  PARTIALLY_REFUNDED
  EXPIRED
}

model Payment {
  id              String    @id @default(cuid())
  userId          String
  amount          Int
  currency        String    @default("KRW")
  tier            String?   // 구매한 티어
  status          String    // PENDING, COMPLETED, FAILED, REFUNDED
  paymentKey      String?   @unique
  orderId         String    @unique
  method          String?   // 결제 방법
  metadata        Json?
  createdAt       DateTime  @default(now())
  completedAt     DateTime?
  
  user            User      @relation(fields: [userId], references: [id])
  
  @@index([userId])
  @@index([status])
  @@index([createdAt])
}

enum CorrectionStatus {
  PENDING
  COMPLETED
  PARTIAL
  FAILED
}

model Announcement {
  id              String    @id @default(cuid())
  title           String
  content         String
  type            AnnouncementType @default(INFO)
  priority        Int       @default(0)
  isActive        Boolean   @default(true)
  targetAudience  String?   // null means all users
  startsAt        DateTime?
  endsAt          DateTime?
  createdBy       String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model AdminLog {
  id              String    @id @default(cuid())
  adminId         String
  action          String
  targetType      String    // user, review, payment, etc.
  targetId        String?
  metadata        String?
  ipAddress       String?
  userAgent       String?
  createdAt       DateTime  @default(now())
  
  admin           User      @relation("AdminLogUser", fields: [adminId], references: [id])
}

model AuditLog {
  id              String    @id @default(cuid())
  userId          String
  action          String
  targetId        String?
  details         Json?
  createdAt       DateTime  @default(now())
  
  user            User      @relation("AuditLogUser", fields: [userId], references: [id])
  
  @@index([userId])
  @@index([action])
  @@index([createdAt])
}

model TierHistory {
  id              String    @id @default(cuid())
  userId          String
  fromTier        String
  toTier          String
  reason          String
  changedBy       String
  createdAt       DateTime  @default(now())
  
  user            User      @relation(fields: [userId], references: [id])
  
  @@index([userId])
  @@index([createdAt])
}

model CreditTransaction {
  id              String    @id @default(cuid())
  userId          String
  amount          Int
  type            String    // EARNED, SPENT, PURCHASED, REFUNDED, ADJUSTED
  reason          String
  balance         Int       // 거래 후 잔액
  relatedId       String?   // 관련 엔티티 ID (예: 파일 ID, 결제 ID)
  createdAt       DateTime  @default(now())
  
  user            User      @relation(fields: [userId], references: [id])
  
  @@index([userId])
  @@index([type])
  @@index([createdAt])
}

model AnalysisJob {
  id              String    @id @default(cuid())
  fileId          String
  userId          String
  status          String    // PENDING, PROCESSING, COMPLETED, FAILED
  processingTime  Int?      // 처리 시간 (밀리초)
  error           String?
  metadata        Json?
  createdAt       DateTime  @default(now())
  completedAt     DateTime?
  
  @@index([userId])
  @@index([status])
  @@index([createdAt])
}

model ErrorFix {
  id              String    @id @default(cuid())
  fileId          String
  userId          String
  errorType       String
  status          String    // PENDING, COMPLETED, FAILED
  fixDetails      Json?
  createdAt       DateTime  @default(now())
  
  @@index([userId])
  @@index([status])
  @@index([createdAt])
}

enum AnnouncementType {
  INFO
  WARNING
  UPDATE
  MAINTENANCE
}

model ErrorPattern {
  id              String    @id @default(cuid())
  fileId          String
  userId          String
  errorType       String
  errorCode       String?
  errorMessage    String
  cellLocation    String?
  sheetName       String?
  errorContext    String?     // 오류 주변 컨텍스트 정보
  
  // 해결 정보
  resolved        Boolean   @default(false)
  resolutionType  String?   // AI, MANUAL, PARTIAL, FAILED
  resolutionDetails String?
  resolutionTime  Int?      // 해결에 걸린 시간 (초)
  
  // 분류 정보
  category        String?   // FORMULA, DATA_TYPE, REFERENCE, FORMAT, etc.
  severity        String    // HIGH, MEDIUM, LOW
  frequency       Int       @default(1)
  
  // AI 처리 정보
  aiModel         String?
  aiConfidence    Float?
  aiSuggestion    String?
  
  createdAt       DateTime  @default(now())
  
  file            File      @relation(fields: [fileId], references: [id], onDelete: Cascade)
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([errorType, category])
  @@index([resolved])
  @@index([createdAt])
}

model ErrorResolutionFailure {
  id              String    @id @default(cuid())
  errorPatternId  String?
  fileId          String
  userId          String
  
  failureReason   String
  failureDetails  String?
  attemptedMethods String?    // 시도한 해결 방법들
  
  errorSnapshot   String      // 오류 상태 스냅샷
  userFeedback    String?
  
  createdAt       DateTime  @default(now())
  
  file            File      @relation(fields: [fileId], references: [id], onDelete: Cascade)
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum ResolutionType {
  AI_RESOLVED
  MANUAL_RESOLVED
  PARTIAL_RESOLVED
  FAILED
  SUGGESTION_ONLY
}

model ReferralReward {
  id              String    @id @default(cuid())
  referralId      String
  referrerId      String    // 추천인 ID
  refereeId       String    // 피추천인 ID
  
  rewardType      String    // SIGNUP, FIRST_PAYMENT, MILESTONE
  creditsAwarded  Int
  cashAwarded     Float     @default(0)
  
  triggerEvent    String    // 보상을 트리거한 이벤트
  triggerDetails  String?     // 이벤트 상세 정보
  
  status          String    @default("PENDING") // PENDING, COMPLETED, FAILED
  completedAt     DateTime?
  
  createdAt       DateTime  @default(now())
  
  referral        Referral  @relation(fields: [referralId], references: [id], onDelete: Cascade)
  
  @@index([referrerId])
  @@index([refereeId])
  @@index([status])
}

model FineTuningData {
  id            String   @id @default(cuid())
  userId        String
  sessionId     String?
  
  // 대화 내용
  userQuery     String   
  systemPrompt  String?  
  aiResponse    String   
  
  // Function Calling 데이터
  functionCalls String?    // [{name, arguments, result}]
  
  // 품질 평가
  userRating    Int?     // 1-5 점수
  isHelpful     Boolean?
  wasEdited     Boolean  @default(false)
  editedResponse String? 
  
  // 메타데이터
  responseTime  Int      // 밀리초
  creditCount   Int
  modelUsed     String
  errorOccurred Boolean  @default(false)
  
  // 학습 데이터 관리
  qualityScore  Float?   // 자동 계산된 품질 점수
  isValidated   Boolean  @default(false)
  includedInDataset String? // 데이터셋 버전
  
  // Excel 관련 컨텍스트
  excelContext  String?    // 처리한 Excel 파일 정보
  taskType      String?  // CREATE, CORRECT, ANALYZE, OPTIMIZE
  
  createdAt     DateTime @default(now())
  
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([qualityScore])
  @@index([createdAt])
  @@index([taskType])
}

model AIModelConfig {
  id            String   @id @default(cuid())
  provider      String   // openai, gemini, claude, llama, groq
  apiKey        String?   // 암호화 저장
  endpoint      String?  // 자체 호스팅 모델용
  modelName     String   // gpt-4, gemini-pro, claude-3, llama2-70b
  isActive      Boolean  @default(false)
  isDefault     Boolean  @default(false)
  
  // 모델별 설정
  maxTokens     Int      @default(2000)
  temperature   Float    @default(0.7)
  costPerCredit Float    // 크레딧당 비용 (USD)
  
  // 사용 조건
  taskTypes     String[] // CREATE, CORRECT, ANALYZE 등
  complexity    String[] // simple, complex
  priority      Int      @default(0) // 우선순위 (높을수록 우선)
  
  // 메타데이터
  displayName   String   // UI 표시명
  description   String?  // 모델 설명
  capabilities  String?    // 모델 특징 및 능력
  tenantId      String   @default("default")
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // 관계
  usageLogs     AIModelUsageLog[]
  
  @@index([tenantId])
  @@index([tenantId, isActive])
  @@index([provider])
  @@index([isActive])
  @@index([priority])
}

model AIModelPolicy {
  id            String   @id @default(cuid())
  name          String   
  description   String?
  
  // 자동 선택 규칙
  selectionMode String   @default("auto") // auto, manual, experiment
  costLimit     Float?   // 일일 비용 한도 (USD)
  
  // 정책 규칙 (JSON)
  rules         String   // 복잡한 규칙 정의 (JSON)
  tenantId      String   @default("default")
  
  @@unique([name, tenantId])
  @@index([tenantId])
  // 예: {
  //   "preferredProviders": ["openai", "gemini"],
  //   "fallbackChain": ["gemini", "claude", "llama"],
  //   "taskMapping": {
  //     "CREATE": ["gemini", "openai"],
  //     "ANALYZE": ["claude", "openai"]
  //   }
  // }
  
  isActive      Boolean  @default(true)
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model AIModelUsageLog {
  id            String   @id @default(cuid())
  modelConfigId String
  userId        String
  
  // 사용 정보
  promptTokens  Int
  completionTokens Int
  totalTokens   Int
  cost          Float    // 실제 비용 (USD)
  
  // 성능 메트릭
  latency       Int      // 응답 시간 (ms)
  success       Boolean
  errorMessage  String?
  
  // 컨텍스트
  taskType      String?
  userRating    Int?     // 1-5
  
  createdAt     DateTime @default(now())
  
  modelConfig   AIModelConfig @relation(fields: [modelConfigId], references: [id])
  
  @@index([modelConfigId])
  @@index([userId])
  @@index([createdAt])
}

model Feedback {
  id             String   @id @default(cuid())
  type           String   // bug, feature, improvement, other
  priority       String   // low, medium, high, urgent
  subject        String
  description    String   @db.Text
  email          String?
  userId         String?
  status         String   @default("OPEN") // OPEN, IN_PROGRESS, RESOLVED, CLOSED
  metadata       Json?
  screenshotPath String?
  response       String?  @db.Text
  respondedBy    String?
  respondedAt    DateTime?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  user        User? @relation(fields: [userId], references: [id])
  responder   User? @relation("FeedbackResponder", fields: [respondedBy], references: [id])
  
  @@index([userId])
  @@index([status])
  @@index([priority])
  @@index([type])
}

model FileVersion {
  id             String   @id @default(cuid())
  fileId         String
  versionNumber  Int
  fileName       String
  fileSize       Int
  checksum       String
  storageUrl     String
  changes        String?  @db.Text
  createdBy      String
  tags           String[]
  metadata       Json?
  createdAt      DateTime @default(now())
  
  file           File     @relation(fields: [fileId], references: [id], onDelete: Cascade)
  createdByUser  User     @relation("FileVersionCreator", fields: [createdBy], references: [id])
  
  @@unique([fileId, versionNumber])
  @@index([fileId])
  @@index([createdBy])
  @@index([createdAt])
}

// =============================================================================
// PipeData 통합 모델들
// =============================================================================

model KnowledgeItem {
  id              String    @id @default(cuid())
  
  // 핵심 Q&A 데이터
  question        String    @db.Text
  answer          String    @db.Text
  excelFunctions  String[]  // VLOOKUP, INDEX, MATCH 등
  codeSnippets    String[]  // 예제 수식들
  
  // 분류 정보
  difficulty      KnowledgeDifficulty @default(MEDIUM)
  qualityScore    Float     // 0.0 - 10.0
  source          String    // pipedata_stackoverflow, pipedata_reddit 등
  tags            String[]  // excel, vlookup, error-handling 등
  
  // 벡터 검색을 위한 임베딩
  embedding       Float[]   // pgvector 확장 사용
  
  // 메타데이터
  metadata        Json      // votes, accepted, author 등 소스별 정보
  
  // 사용 통계
  searchCount     Int       @default(0)  // 검색된 횟수
  useCount        Int       @default(0)  // 실제 사용된 횟수
  helpfulVotes    Int       @default(0)  // 도움됨 투표
  
  // 관리 정보
  isActive        Boolean   @default(true)
  lastUsed        DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // 관계
  usageLogs       KnowledgeUsageLog[]
  feedbacks       KnowledgeFeedback[]
  
  @@index([source])
  @@index([difficulty])
  @@index([qualityScore])
  @@index([searchCount])
  @@index([isActive])
  @@index([tags])
}

model KnowledgeUsageLog {
  id                String        @id @default(cuid())
  knowledgeItemId   String
  userId            String?
  
  // 사용 컨텍스트
  userQuery         String        @db.Text
  similarityScore   Float         // 0.0 - 1.0
  wasHelpful        Boolean?      // 사용자 피드백
  
  // 사용된 상황
  analysisId        String?       // 어떤 분석에서 사용되었는지
  sessionId         String?       // 사용자 세션
  
  createdAt         DateTime      @default(now())
  
  knowledgeItem     KnowledgeItem @relation(fields: [knowledgeItemId], references: [id], onDelete: Cascade)
  user              User?         @relation("KnowledgeUsageLogs", fields: [userId], references: [id])
  
  @@index([knowledgeItemId])
  @@index([userId])
  @@index([createdAt])
  @@index([wasHelpful])
}

model KnowledgeFeedback {
  id                String        @id @default(cuid())
  knowledgeItemId   String
  userId            String?
  
  // 피드백 내용
  rating            Int           // 1-5 점수
  comment           String?       @db.Text
  isReported        Boolean       @default(false)
  reportReason      String?       // 부적절한 내용 신고 사유
  
  createdAt         DateTime      @default(now())
  
  knowledgeItem     KnowledgeItem @relation(fields: [knowledgeItemId], references: [id], onDelete: Cascade)
  user              User?         @relation("KnowledgeFeedbacks", fields: [userId], references: [id])
  
  @@index([knowledgeItemId])
  @@index([userId])
  @@index([rating])
  @@index([isReported])
}

model PipeDataSync {
  id              String    @id @default(cuid())
  
  // 동기화 정보
  batchId         String    @unique
  source          String    // pipedata_stackoverflow, pipedata_reddit 등
  totalItems      Int
  processedItems  Int       @default(0)
  successItems    Int       @default(0)
  errorItems      Int       @default(0)
  
  // 상태 관리
  status          PipeDataSyncStatus @default(PENDING)
  startedAt       DateTime?
  completedAt     DateTime?
  
  // 에러 정보
  errors          String[]  // 에러 메시지들
  lastError       String?   @db.Text
  
  // 메타데이터
  qualityThreshold Float    @default(7.0)  // 수집 품질 임계값
  metadata        Json?     // 추가 정보
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  @@index([status])
  @@index([source])
  @@index([createdAt])
}

model RAGCache {
  id              String    @id @default(cuid())
  
  // 캐시 키 (사용자 쿼리의 해시)
  queryHash       String    @unique
  originalQuery   String    @db.Text
  
  // 검색 결과 캐시
  searchResults   Json      // KnowledgeSearchResult[]
  enhancedPrompt  String?   @db.Text
  
  // 캐시 메타정보
  hitCount        Int       @default(0)
  lastHit         DateTime?
  expiresAt       DateTime
  
  createdAt       DateTime  @default(now())
  
  @@index([queryHash])
  @@index([expiresAt])
  @@index([hitCount])
}

// Enum 정의들
enum KnowledgeDifficulty {
  EASY
  MEDIUM
  HARD
  EXPERT
}

enum PipeDataSyncStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}

// 사용자 통계 모델
model UserStats {
  id                          String    @id @default(cuid())
  userId                      String    @unique
  
  // 분석 통계
  totalAnalyses               Int       @default(0)
  errorDetectionCount         Int       @default(0)
  visualComparisonCount       Int       @default(0)
  improvementSuggestionCount  Int       @default(0)
  
  // AI 사용 통계
  totalTokensUsed             Int       @default(0)
  totalCost                   Float     @default(0)
  preferredTier               String?   // TIER1, TIER2, TIER3
  
  // 평균값
  averageFileSize             Float     @default(0)
  averageErrorCount           Float     @default(0)
  averageProcessingTime       Float     @default(0)
  
  // 시간 정보
  lastAnalysisAt              DateTime?
  createdAt                   DateTime  @default(now())
  updatedAt                   DateTime  @updatedAt
  
  user                        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
}

// 분석 이력 모델
model AnalysisHistory {
  id              String    @id @default(cuid())
  userId          String
  analysisId      String    @unique
  
  // 분석 정보
  type            String    // text, image, hybrid
  tier            String    // TIER1, TIER2, TIER3
  query           String?   @db.Text
  
  // 파일 정보
  fileInfo        Json      // { excelFileName, excelFileSize, imageCount, totalSize }
  
  // 결과 정보
  result          Json      // { confidence, errorCount, correctionCount }
  
  // 비용 정보
  cost            Json      // { tokensUsed, estimatedCost }
  
  // 메타데이터
  metadata        Json?
  
  createdAt       DateTime  @default(now())
  
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([type])
  @@index([tier])
  @@index([createdAt])
}

// 부분 결과 저장 모델
model PartialResult {
  id              String    @id @default(cuid())
  sessionId       String
  stage           String    // upload, processing, analysis, download
  data            Json
  errorMessage    String?
  attemptNumber   Int
  createdAt       DateTime  @default(now())
  
  @@index([sessionId])
}

// 에러 로그 모델
model ErrorLog {
  id              String    @id @default(cuid())
  sessionId       String
  stage           String
  errorMessage    String    @db.Text
  errorStack      String?   @db.Text
  attemptNumber   Int
  resolution      String?
  metadata        Json?
  createdAt       DateTime  @default(now())
  
  @@index([sessionId])
  @@index([createdAt])
}