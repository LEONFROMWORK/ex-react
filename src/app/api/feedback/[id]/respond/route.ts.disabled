import { NextRequest, NextResponse } from 'next/server'
import { prisma } from '@/lib/prisma'
import { auth } from '@/lib/auth'
import { z } from 'zod'
import { NotificationService } from '@/lib/services/notification.service'

const responseSchema = z.object({
  response: z.string().min(1).max(5000)
})

export async function POST(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    const session = await auth()
    
    // 관리자만 답변 가능
    if (!session?.user || !['ADMIN', 'SUPER_ADMIN', 'SUPPORT'].includes(session.user.role || '')) {
      return NextResponse.json(
        { error: '권한이 없습니다.' },
        { status: 403 }
      )
    }
    
    const body = await request.json()
    const { response } = responseSchema.parse(body)
    
    // 피드백 조회
    const feedback = await prisma.feedback.findUnique({
      where: { id: params.id },
      include: {
        user: {
          select: {
            email: true,
            name: true
          }
        }
      }
    })
    
    if (!feedback) {
      return NextResponse.json(
        { error: '피드백을 찾을 수 없습니다.' },
        { status: 404 }
      )
    }
    
    // 피드백 업데이트
    const updatedFeedback = await prisma.feedback.update({
      where: { id: params.id },
      data: {
        response,
        respondedBy: session.user.id,
        respondedAt: new Date(),
        status: 'RESOLVED'
      }
    })
    
    // 감사 로그 기록
    await prisma.auditLog.create({
      data: {
        userId: session.user.id,
        action: 'RESPOND_FEEDBACK',
        targetId: params.id,
        details: { response }
      }
    })
    
    // 이메일이 있는 경우 답변 알림
    if (feedback.email || feedback.user?.email) {
      const notificationService = NotificationService.getInstance()
      
      try {
        await notificationService.sendNotification({
          title: `피드백 답변: ${feedback.subject}`,
          body: response,
          recipientEmail: feedback.email || feedback.user?.email!,
          recipientName: feedback.user?.name || '고객님',
          type: 'email',
          priority: 'medium',
          metadata: {
            feedbackId: feedback.id,
            feedbackType: feedback.type,
            respondedBy: session.user.name
          }
        })
      } catch (notifError) {
        // 알림 전송 실패는 무시하고 계속 진행
        console.error('Failed to send notification:', notifError)
      }
    }
    
    return NextResponse.json({
      success: true,
      feedback: updatedFeedback,
      message: '답변이 전송되었습니다.'
    })
    
  } catch (error) {
    console.error('Feedback response error:', error)
    
    if (error instanceof z.ZodError) {
      return NextResponse.json(
        { error: '입력 데이터가 올바르지 않습니다.', details: error.errors },
        { status: 400 }
      )
    }
    
    return NextResponse.json(
      { error: '답변 전송 중 오류가 발생했습니다.' },
      { status: 500 }
    )
  }
}