import { EmbeddingData } from './embedding-generator'

// ChromaDB는 런타임에서만 import (빌드 시 오류 방지)
type ChromaApi = any
type Collection = any

export interface VectorSearchResult {
  id: string
  score: number
  metadata: any
  document: string
}

export interface VectorDBConfig {
  host?: string
  port?: number
  ssl?: boolean
  database?: string
  collectionName?: string
}

export class VectorDB {
  private client: ChromaApi | null = null
  private collection: Collection | null = null
  private collectionName: string
  private initialized: boolean = false
  private config: VectorDBConfig

  constructor(config: VectorDBConfig = {}) {
    this.collectionName = config.collectionName || 'excel_knowledge_base'
    this.config = {
      host: config.host || 'http://localhost:8000',
      port: config.port || 8000,
      ssl: config.ssl || false,
      database: config.database,
      ...config
    }
  }

  /**
   * ChromaDB 동적 import
   */
  private async loadChromaDB(): Promise<any> {
    if (process.env.NODE_ENV === 'production' || process.env.BUILDING === 'true') {
      // 프로덕션이나 빌드 시에는 Mock 구현 사용
      return this.getMockChromaDB()
    }
    
    try {
      const ChromaDB = await import('chromadb')
      return ChromaDB as any
    } catch (error) {
      console.warn('ChromaDB not available, using mock implementation')
      return this.getMockChromaDB()
    }
  }

  /**
   * Mock ChromaDB 구현 (개발/빌드 시 사용)
   */
  private getMockChromaDB() {
    const mockCollection = {
      async add() { return true },
      async query() { return { ids: [[]], metadatas: [[]], documents: [[]], distances: [[]] } },
      async update() { return true },
      async delete() { return true },
      async count() { return 0 },
      async get() { return { metadatas: [] } }
    }

    return class MockChromaApi {
      async getCollection() {
        return mockCollection
      }
      async createCollection() {
        return mockCollection
      }
      async deleteCollection() {
        return true
      }
      async version() {
        return 'mock-0.1.0'
      }
    }
  }

  /**
   * ChromaDB 연결 및 컬렉션 초기화
   */
  async initialize(): Promise<void> {
    try {
      // ChromaDB 동적 로드
      const ChromaApi = await this.loadChromaDB()
      this.client = new ChromaApi({
        path: this.config.host,
      })

      // 기존 컬렉션 조회 또는 생성
      try {
        this.collection = await this.client.getCollection({
          name: this.collectionName,
        })
        console.log(`기존 컬렉션 연결: ${this.collectionName}`)
      } catch (error) {
        // 컬렉션이 없으면 새로 생성
        this.collection = await this.client.createCollection({
          name: this.collectionName,
          metadata: {
            description: 'Excel Q&A Knowledge Base',
            created_at: new Date().toISOString(),
            version: '1.0'
          }
        })
        console.log(`새 컬렉션 생성: ${this.collectionName}`)
      }
      
      this.initialized = true
    } catch (error) {
      console.error('VectorDB 초기화 실패:', error)
      throw new Error(`VectorDB 초기화 실패: ${(error as Error).message}`)
    }
  }

  /**
   * 임베딩 데이터를 벡터 DB에 저장 (upload route에서 사용)
   */
  async store(data: {
    id: string
    text: string
    embedding: number[]
    metadata: any
  }): Promise<void> {
    if (!this.initialized || !this.collection) {
      throw new Error('VectorDB가 초기화되지 않았습니다')
    }

    try {
      await this.collection.add({
        ids: [data.id],
        embeddings: [data.embedding],
        metadatas: [data.metadata],
        documents: [data.text]
      })
    } catch (error) {
      console.error('벡터 DB 저장 실패:', error)
      throw new Error(`벡터 DB 저장 실패: ${(error as Error).message}`)
    }
  }

  /**
   * 임베딩 데이터 일괄 저장
   */
  async addEmbeddings(embeddingData: EmbeddingData[]): Promise<void> {
    if (!this.initialized || !this.collection) {
      throw new Error('VectorDB가 초기화되지 않았습니다')
    }

    try {
      const batchSize = 100
      
      for (let i = 0; i < embeddingData.length; i += batchSize) {
        const batch = embeddingData.slice(i, i + batchSize)
        
        await this.collection.add({
          ids: batch.map(item => item.id),
          embeddings: batch.map(item => item.embedding),
          metadatas: batch.map(item => item.metadata),
          documents: batch.map(item => item.text)
        })
        
        // 진행률 로그
        const progress = ((i + batch.length) / embeddingData.length) * 100
        console.log(`벡터 DB 저장 진행률: ${progress.toFixed(1)}%`)
        
        // Rate limiting을 위한 대기
        if (i + batchSize < embeddingData.length) {
          await this.delay(100)
        }
      }
      
      console.log(`${embeddingData.length}개 임베딩 저장 완료`)
    } catch (error) {
      console.error('임베딩 저장 실패:', error)
      throw new Error(`임베딩 저장 실패: ${(error as Error).message}`)
    }
  }

  /**
   * 벡터 유사도 검색
   */
  async search(
    queryEmbedding: number[],
    limit: number = 5,
    filter?: any
  ): Promise<VectorSearchResult[]> {
    if (!this.initialized || !this.collection) {
      throw new Error('VectorDB가 초기화되지 않았습니다')
    }

    try {
      const results = await this.collection.query({
        queryEmbeddings: [queryEmbedding],
        nResults: limit,
        where: filter,
        include: ['metadatas', 'documents', 'distances']
      })

      // 결과 변환
      const searchResults: VectorSearchResult[] = []
      
      if (results.ids && results.ids[0]) {
        for (let i = 0; i < results.ids[0].length; i++) {
          searchResults.push({
            id: results.ids[0][i],
            score: 1 - (results.distances?.[0]?.[i] || 0), // 거리를 유사도로 변환
            metadata: results.metadatas?.[0]?.[i] || {},
            document: results.documents?.[0]?.[i] || ''
          })
        }
      }

      return searchResults
    } catch (error) {
      console.error('벡터 검색 실패:', error)
      throw new Error(`벡터 검색 실패: ${(error as Error).message}`)
    }
  }

  /**
   * 연결 상태 확인
   */
  async healthCheck(): Promise<boolean> {
    try {
      if (!this.client) return false
      const version = await this.client.version()
      console.log(`ChromaDB 버전: ${version}`)
      return true
    } catch (error) {
      console.error('ChromaDB 연결 실패:', error)
      return false
    }
  }

  /**
   * 지연 함수
   */
  private delay(ms: number): Promise<void> {
    return new Promise(resolve => setTimeout(resolve, ms))
  }

  /**
   * 리소스 정리
   */
  async cleanup(): Promise<void> {
    this.collection = null
    this.initialized = false
  }
}