import ExcelJS from 'exceljs'
import { AnalysisModule, AnalysisResult, ExcelAnalyzerOptions } from './types'
import { CircularReferenceModule } from './modules/circular-reference'
import { DataTypeCheckerModule } from './modules/data-type-checker'
import { FormulaOptimizerModule } from './modules/formula-optimizer'
import { FormulaEngine } from '../../lib/excel/formula-engine'

export class ExcelAnalyzer {
  private modules: Map<string, AnalysisModule> = new Map()
  private options: ExcelAnalyzerOptions
  private formulaEngine: FormulaEngine
  
  constructor(options: ExcelAnalyzerOptions = {}) {
    this.options = {
      maxErrors: 100,
      ...options
    }
    
    // HyperFormula 엔진 초기화
    this.formulaEngine = new FormulaEngine()
    
    // 기본 모듈 등록
    if (!options.modules) {
      this.registerModule(new CircularReferenceModule())
      this.registerModule(new DataTypeCheckerModule())
      this.registerModule(new FormulaOptimizerModule())
    } else {
      options.modules.forEach(module => this.registerModule(module))
    }
  }
  
  registerModule(module: AnalysisModule) {
    this.modules.set(module.name, module)
  }
  
  async analyze(fileBuffer: Buffer | ArrayBuffer): Promise<AnalysisResult[]> {
    const workbook = new ExcelJS.Workbook()
    // Convert ArrayBuffer to Buffer if needed
    const buffer = Buffer.isBuffer(fileBuffer) ? fileBuffer : 
                   fileBuffer instanceof ArrayBuffer ? Buffer.from(fileBuffer) :
                   Buffer.from(fileBuffer as any)
    await workbook.xlsx.load(buffer)
    
    const allResults: AnalysisResult[] = []
    const skipModules = new Set(this.options.skipModules || [])
    
    try {
      // HyperFormula에 워크북 로드
      await this.formulaEngine.loadWorkbook(workbook)
      
      // 고급 수식 분석 수행
      const formulaResults = await this.analyzeFormulasWithHyperFormula(workbook)
      allResults.push(...formulaResults)
      
    } catch (error) {
      console.error('HyperFormula analysis error:', error)
      allResults.push({
        type: 'warning',
        severity: 'medium',
        location: 'Formula Engine',
        message: 'HyperFormula 분석 중 일부 오류가 발생했습니다',
        code: 'FORMULA_ENGINE_WARNING',
        metadata: { error: String(error) }
      })
    }
    
    // 각 모듈 실행
    for (const [name, module] of this.modules) {
      if (skipModules.has(name)) continue
      
      try {
        console.log(`Running analysis module: ${name}`)
        const results = await module.analyze(workbook)
        allResults.push(...results)
        
        // 최대 오류 수 체크
        if (allResults.length >= this.options.maxErrors!) {
          break
        }
      } catch (error) {
        console.error(`Error in module ${name}:`, error)
        allResults.push({
          type: 'error',
          severity: 'high',
          location: 'Analysis Module',
          message: `분석 모듈 ${name} 실행 중 오류 발생`,
          code: 'MODULE_ERROR',
          metadata: { error: String(error) }
        })
      }
    }
    
    // 결과 정렬 (심각도 순)
    return this.sortResults(allResults)
  }
  
  private sortResults(results: AnalysisResult[]): AnalysisResult[] {
    const severityOrder = { high: 0, medium: 1, low: 2 }
    const typeOrder = { error: 0, warning: 1, suggestion: 2 }
    
    return results.sort((a, b) => {
      // 먼저 타입으로 정렬
      const typeDiff = typeOrder[a.type] - typeOrder[b.type]
      if (typeDiff !== 0) return typeDiff
      
      // 같은 타입이면 심각도로 정렬
      return severityOrder[a.severity] - severityOrder[b.severity]
    })
  }
  
  async generateReport(results: AnalysisResult[]): Promise<string> {
    const grouped = this.groupResults(results)
    let report = '# Excel 분석 보고서\n\n'
    
    report += `## 요약\n`
    report += `- 총 ${results.length}개 항목 발견\n`
    report += `- 오류: ${grouped.error?.length || 0}개\n`
    report += `- 경고: ${grouped.warning?.length || 0}개\n`
    report += `- 제안: ${grouped.suggestion?.length || 0}개\n\n`
    
    if (grouped.error && grouped.error.length > 0) {
      report += `## 🔴 오류 (${grouped.error.length}개)\n\n`
      grouped.error.forEach((result, idx) => {
        report += `### ${idx + 1}. ${result.message}\n`
        report += `- 위치: ${result.location}\n`
        report += `- 심각도: ${result.severity}\n`
        if (result.suggestion) {
          report += `- 해결 방법: ${result.suggestion}\n`
        }
        report += '\n'
      })
    }
    
    if (grouped.warning && grouped.warning.length > 0) {
      report += `## 🟡 경고 (${grouped.warning.length}개)\n\n`
      grouped.warning.forEach((result, idx) => {
        report += `### ${idx + 1}. ${result.message}\n`
        report += `- 위치: ${result.location}\n`
        if (result.suggestion) {
          report += `- 권장 사항: ${result.suggestion}\n`
        }
        report += '\n'
      })
    }
    
    if (grouped.suggestion && grouped.suggestion.length > 0) {
      report += `## 💡 개선 제안 (${grouped.suggestion.length}개)\n\n`
      grouped.suggestion.forEach((result, idx) => {
        report += `### ${idx + 1}. ${result.message}\n`
        report += `- 위치: ${result.location}\n`
        report += `- 제안: ${result.suggestion}\n`
        report += '\n'
      })
    }
    
    return report
  }
  
  private groupResults(results: AnalysisResult[]): Record<string, AnalysisResult[]> {
    return results.reduce((acc, result) => {
      if (!acc[result.type]) acc[result.type] = []
      acc[result.type].push(result)
      return acc
    }, {} as Record<string, AnalysisResult[]>)
  }
  
  /**
   * HyperFormula를 사용한 고급 수식 분석
   */
  private async analyzeFormulasWithHyperFormula(workbook: ExcelJS.Workbook): Promise<AnalysisResult[]> {
    const results: AnalysisResult[] = []
    
    try {
      // 모든 워크시트의 수식 분석
      for (const worksheet of workbook.worksheets) {
        const sheetName = worksheet.name
        
        worksheet.eachRow((row, rowNumber) => {
          row.eachCell((cell, colNumber) => {
            if (cell.type === ExcelJS.ValueType.Formula && cell.formula) {
              try {
                // HyperFormula로 수식 분석
                const analysis = this.formulaEngine.analyzeFormula(cell.formula, sheetName)
                const location = `${sheetName}!${this.columnToLetter(colNumber)}${rowNumber}`
                
                // 수식 검증 결과 처리
                if (!analysis.validation.isValid) {
                  results.push({
                    type: 'error',
                    severity: this.getErrorSeverity(analysis.validation.errorType),
                    location,
                    message: `수식 오류: ${analysis.validation.error}`,
                    code: analysis.validation.errorType || 'FORMULA_ERROR',
                    suggestion: this.getFormulaSuggestion(analysis.validation.errorType),
                    metadata: {
                      formula: cell.formula,
                      errorType: analysis.validation.errorType,
                      originalValue: cell.value
                    }
                  })
                }
                
                // 성능 최적화 제안
                if (analysis.optimization) {
                  results.push({
                    type: 'suggestion',
                    severity: 'low',
                    location,
                    message: analysis.optimization.suggestion,
                    code: 'FORMULA_OPTIMIZATION',
                    suggestion: `변경 전: ${analysis.optimization.original}\n변경 후: ${analysis.optimization.optimized}`,
                    metadata: {
                      originalFormula: analysis.optimization.original,
                      optimizedFormula: analysis.optimization.optimized,
                      performanceGain: analysis.optimization.performanceGain
                    }
                  })
                }
                
                // 복잡도 경고
                if (analysis.complexity === 'complex') {
                  results.push({
                    type: 'warning',
                    severity: 'medium',
                    location,
                    message: '복잡한 수식이 감지되었습니다. 성능에 영향을 줄 수 있습니다.',
                    code: 'COMPLEX_FORMULA',
                    suggestion: '수식을 단순화하거나 여러 셀로 분할하는 것을 고려해보세요.',
                    metadata: {
                      formula: cell.formula,
                      complexity: analysis.complexity,
                      dependencies: analysis.dependencies
                    }
                  })
                }
                
                // 휘발성 함수 경고
                if (analysis.volatileFunctions.length > 0) {
                  results.push({
                    type: 'warning',
                    severity: 'medium',
                    location,
                    message: `휘발성 함수가 감지되었습니다: ${analysis.volatileFunctions.join(', ')}`,
                    code: 'VOLATILE_FUNCTION',
                    suggestion: '휘발성 함수는 매번 재계산되어 성능에 영향을 줍니다. 가능하면 정적 값으로 대체하세요.',
                    metadata: {
                      formula: cell.formula,
                      volatileFunctions: analysis.volatileFunctions
                    }
                  })
                }
                
              } catch (error) {
                // 개별 수식 분석 오류는 무시하고 계속 진행
                console.warn(`Formula analysis error at ${sheetName}!${this.columnToLetter(colNumber)}${rowNumber}:`, error)
              }
            }
          })
        })
      }
      
      // 순환 참조 감지
      const circularRefs = this.formulaEngine.detectCircularReferences()
      circularRefs.forEach(ref => {
        results.push({
          type: 'error',
          severity: 'high',
          location: ref.cells.join(', '),
          message: ref.description,
          code: 'CIRCULAR_REFERENCE',
          suggestion: '순환 참조를 제거하여 무한 계산을 방지하세요.',
          metadata: {
            involvedCells: ref.cells
          }
        })
      })
      
    } catch (error) {
      console.error('HyperFormula analysis error:', error)
      results.push({
        type: 'warning',
        severity: 'medium',
        location: 'Formula Analysis',
        message: '일부 수식 분석을 완료할 수 없었습니다',
        code: 'ANALYSIS_INCOMPLETE',
        metadata: { error: String(error) }
      })
    }
    
    return results
  }
  
  /**
   * 오류 타입에 따른 심각도 결정
   */
  private getErrorSeverity(errorType?: string): 'high' | 'medium' | 'low' {
    const highSeverityErrors = ['DIV_BY_ZERO', 'CIRCULAR_REFERENCE', 'REF']
    const mediumSeverityErrors = ['VALUE', 'NUM', 'NAME']
    
    if (!errorType) return 'medium'
    if (highSeverityErrors.includes(errorType)) return 'high'
    if (mediumSeverityErrors.includes(errorType)) return 'medium'
    return 'low'
  }
  
  /**
   * 오류 타입에 따른 수정 제안
   */
  private getFormulaSuggestion(errorType?: string): string {
    const suggestions: Record<string, string> = {
      'DIV_BY_ZERO': '0으로 나누는 부분을 확인하고 IF 함수를 사용하여 조건부 계산을 구현하세요.',
      'VALUE': '데이터 타입을 확인하고 적절한 변환 함수를 사용하세요.',
      'NUM': '숫자 범위와 형식을 확인하세요.',
      'NAME': '함수명과 셀 참조를 확인하세요.',
      'REF': '삭제된 셀이나 시트에 대한 참조를 수정하세요.',
      'CIRCULAR_REFERENCE': '순환 참조를 제거하여 계산 루프를 방지하세요.'
    }
    
    return suggestions[errorType || ''] || '수식을 검토하고 수정하세요.'
  }
  
  /**
   * 열 번호를 문자로 변환 (1 -> A, 2 -> B, ...)
   */
  private columnToLetter(column: number): string {
    let result = ''
    while (column > 0) {
      column--
      result = String.fromCharCode(65 + (column % 26)) + result
      column = Math.floor(column / 26)
    }
    return result
  }
  
  /**
   * 엔진 정리
   */
  destroy(): void {
    if (this.formulaEngine) {
      this.formulaEngine.destroy()
    }
  }
}

// Export types and modules
export * from './types'
export { CircularReferenceModule } from './modules/circular-reference'
export { DataTypeCheckerModule } from './modules/data-type-checker'
export { FormulaOptimizerModule } from './modules/formula-optimizer'