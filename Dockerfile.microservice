# 마이크로서비스 준비를 위한 초경량 Docker 이미지
# Stage 1: Dependencies (캐시 최적화)
FROM node:18-alpine AS deps
RUN apk add --no-cache libc6-compat python3 make g++
WORKDIR /app

# 의존성 파일만 복사 (캐시 활용)
COPY package.json package-lock.json ./
COPY prisma ./prisma/

# 프로덕션 의존성만 설치
RUN npm ci --only=production --legacy-peer-deps && \
    npx prisma generate && \
    # 바이너리 최적화
    npm rebuild --arch=x64 --platform=linux --libc=musl && \
    # 불필요한 파일 제거
    find node_modules -name "*.md" -delete && \
    find node_modules -name "*.map" -delete && \
    find node_modules -name "test" -type d -prune -exec rm -rf {} + && \
    find node_modules -name "*.ts" -not -name "*.d.ts" -delete

# Stage 2: Builder (빌드 전용)
FROM node:18-alpine AS builder
RUN apk add --no-cache libc6-compat
WORKDIR /app

# 전체 의존성 설치 (개발 포함)
COPY package.json package-lock.json ./
RUN npm ci --legacy-peer-deps

# 소스 코드 복사
COPY . .

# 환경 변수 설정
ENV NEXT_TELEMETRY_DISABLED 1
ENV NODE_ENV production

# 빌드 (standalone 모드)
RUN npm run build && \
    # 빌드 후 정리
    rm -rf .next/cache && \
    rm -rf node_modules

# Stage 3: Production (최종 이미지)
FROM node:18-alpine AS runner
WORKDIR /app

# 보안: non-root 사용자
RUN addgroup --system --gid 1001 nodejs && \
    adduser --system --uid 1001 nextjs

# 환경 변수
ENV NODE_ENV production
ENV NEXT_TELEMETRY_DISABLED 1

# 프로덕션 의존성 복사
COPY --from=deps --chown=nextjs:nodejs /app/node_modules ./node_modules
COPY --from=deps --chown=nextjs:nodejs /app/node_modules/.prisma ./node_modules/.prisma

# 빌드 결과물 복사
COPY --from=builder --chown=nextjs:nodejs /app/public ./public
COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static

# 설정 파일
COPY --chown=nextjs:nodejs package.json ./

USER nextjs
EXPOSE 3000
ENV PORT 3000

# 헬스체크
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD node healthcheck.js || exit 1

CMD ["node", "server.js"]